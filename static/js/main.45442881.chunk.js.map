{"version":3,"sources":["pics/naruto.png","pics/silentvoice.jpg","pics/spiritedaway.jpg","pics/weatheringwithyou.jpg","pics/yourname.png","ImageComp.js","Slider.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ImageComp","src","alt","style","width","height","Slider","useState","x","setX","sliderArr","a1","a2","a3","a4","a5","className","map","item","index","key","transform","id","onClick","length","class","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,+C,gBCA3CD,EAAOC,QAAU,IAA0B,sC,+LCc5BC,MAZf,YAA6B,IAARC,EAAO,EAAPA,IASjB,OAAO,yBAAKA,IAAKA,EAAKC,IAAI,YAAYC,MAPxB,CAEVC,MAAM,OACNC,OAAO,W,gFC8DAC,MA5Df,WAAkB,MAIIC,mBAAS,GAJb,mBAIPC,EAJO,KAIJC,EAJI,KAKVC,EAAY,CACZ,kBAAC,EAAD,CAAWT,IAAKU,MAChB,kBAAC,EAAD,CAAWV,IAAKW,MAChB,kBAAC,EAAD,CAAWX,IAAKY,MAChB,kBAAC,EAAD,CAAWZ,IAAKa,MAChB,kBAAC,EAAD,CAAWb,IAAKc,OAgBpB,OAEI,yBAAKC,UAAU,UAGVN,EAAUO,KAAI,SAACC,EAAKC,GAEjB,OAII,yBAAKC,IAAKD,EAAOH,UAAU,QAAQb,MAAO,CAACkB,UAAU,cAAD,OAAeb,EAAf,QAC/CU,MAOb,4BAAQI,GAAG,SAASC,QAhCb,WAEDd,EAAJ,IAAND,GAAgB,KAAOE,EAAUc,OAAS,GAAWhB,EAAI,OA+BjD,uBAAGiB,MAAM,yBAGb,4BAAQH,GAAG,UAAUC,QA9Bb,WAGXf,KAAM,KAAOE,EAAUc,OAAO,GAAMf,EAAK,GAAKA,EAAKD,EAAI,OA4BhD,uBAAGiB,MAAM,4BC3CVC,MAZf,WAEE,OAEE,yBAAKV,UAAU,OACb,kBAAC,EAAD,QCGcW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.45442881.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/naruto.6c210830.png\";","module.exports = __webpack_public_path__ + \"static/media/silentvoice.ce07ce4a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/spiritedaway.e3a56a10.jpg\";","module.exports = __webpack_public_path__ + \"static/media/weatheringwithyou.982903d0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/yourname.258d5837.png\";","import React from 'react';\r\n\r\nfunction ImageComp({ src }) {\r\n\r\n    let imgStyles={\r\n\r\n        width:100+\"%\",\r\n        height:\"auto\"\r\n\r\n    }\r\n    \r\n    return <img src={src} alt=\"slide-img\" style={imgStyles}></img>;\r\n}\r\n\r\nexport default ImageComp;\r\n\r\n","import React,{useState} from \"react\";\r\nimport \"./slider.scss\";\r\nimport ImageComp from \"./ImageComp\";\r\nimport a1 from \"./pics/naruto.png\";\r\nimport a2 from \"./pics/silentvoice.jpg\";\r\nimport a3 from \"./pics/spiritedaway.jpg\";\r\nimport a4 from \"./pics/weatheringwithyou.jpg\";\r\nimport a5 from \"./pics/yourname.png\";\r\n\r\nfunction Slider() {\r\n\r\n    // create an array for component to show inside the slider\r\n    // add components to the array\r\n    const [x, setX] = useState(0); //useState is a hook function that allows us to have state variables in functional components. we can create a piece of state without switching to class components.\r\n    let sliderArr = [\r\n        <ImageComp src={a1} />, \r\n        <ImageComp src={a2} />,\r\n        <ImageComp src={a3} />,\r\n        <ImageComp src={a4} />,\r\n        <ImageComp src={a5} />\r\n    ];\r\n\r\n    const goLeft = () => {\r\n        // console.log(x);\r\n        x === 0 ? setX(-100 * (sliderArr.length - 1)) : setX(x + 100);\r\n        // setX(x + 100);\r\n    };\r\n\r\n    const goRight = () => {\r\n        // console.log(x);\r\n        // sliderArr.length was used so the input can be dynamic\r\n        (x=== -100 * (sliderArr.length-1)) ? setX(0) : setX(x - 100);\r\n    };\r\n    \r\n\r\n    return (\r\n\r\n        <div className=\"slider\">\r\n\r\n            {/* map method handles array elements which creates a new array. the index is uded inside map() method to state the position of each element in an array but doesn't change the original array. */}\r\n            {sliderArr.map((item,index)=>{\r\n\r\n                return(\r\n\r\n                    // transform property allows us to DeviceRotationRate, scale, move, etc...\r\n                    // translateX() function is a 2D transform function used to translate an element along the x-axis.\r\n                    <div key={index} className=\"slide\" style={{transform:`translateX(${x}%)`}}> \r\n                        {item}\r\n                    </div>\r\n\r\n                );\r\n\r\n            })}\r\n\r\n            <button id=\"goLeft\" onClick={goLeft}>\r\n                <i class=\"fas fa-chevron-left\"></i>\r\n            </button> \r\n\r\n            <button id=\"goRight\" onClick={goRight}>\r\n                <i class=\"fas fa-chevron-right\"></i>\r\n            </button>  \r\n\r\n        </div>\r\n\r\n    );\r\n\r\n\r\n}\r\n\r\nexport default Slider;","import React from 'react';\nimport './App.css';\nimport Slider from \"./Slider\";\n\nfunction App() {\n\n  return (\n\n    <div className=\"App\">\n      <Slider />\n    </div>\n\n  );\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  \n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n"],"sourceRoot":""}